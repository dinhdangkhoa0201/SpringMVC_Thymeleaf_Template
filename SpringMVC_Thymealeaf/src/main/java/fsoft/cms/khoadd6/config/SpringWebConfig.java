package fsoft.cms.khoadd6.config;import com.fasterxml.jackson.databind.DeserializationFeature;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.databind.SerializationFeature;import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;import nz.net.ultraq.thymeleaf.LayoutDialect;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.ApplicationContext;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.ComponentScan;import org.springframework.context.annotation.ComponentScans;import org.springframework.context.annotation.Configuration;import org.springframework.http.CacheControl;import org.springframework.http.converter.StringHttpMessageConverter;import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;import org.springframework.web.client.RestTemplate;import org.springframework.web.multipart.commons.CommonsMultipartResolver;import org.springframework.web.servlet.config.annotation.EnableWebMvc;import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;import org.springframework.web.servlet.config.annotation.ViewResolverRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;import org.thymeleaf.extras.java8time.dialect.Java8TimeDialect;import org.thymeleaf.extras.springsecurity5.dialect.SpringSecurityDialect;import org.thymeleaf.spring5.SpringTemplateEngine;import org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver;import org.thymeleaf.spring5.view.ThymeleafViewResolver;import javax.annotation.PostConstruct;import java.util.concurrent.TimeUnit;@EnableWebMvc@Configuration@ComponentScan(basePackages = {"fsoft.cms.khoadd6.*"})public class SpringWebConfig implements WebMvcConfigurer {    @Bean    public LayoutDialect layoutDialect() {        return new LayoutDialect();    }    @Bean    public SpringSecurityDialect securityDialect() {        return new SpringSecurityDialect();    }    @Bean    @PostConstruct    public ObjectMapper objectMapper() {        ObjectMapper objectMapper = new ObjectMapper();        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);        objectMapper.registerModule(new JavaTimeModule());        return objectMapper;    }    @Bean    public SpringResourceTemplateResolver templateResolver() {        SpringResourceTemplateResolver templateResolver = new SpringResourceTemplateResolver();        templateResolver.setPrefix("/WEB-INF/views/");        templateResolver.setSuffix(".html");        templateResolver.setCharacterEncoding("UTF-8");        templateResolver.setCacheable(false);        return templateResolver;    }    @Bean    public SpringTemplateEngine templateEngine() {        SpringTemplateEngine templateEngine = new SpringTemplateEngine();        templateEngine.setTemplateResolver(templateResolver());        templateEngine.addDialect(new SpringSecurityDialect());        templateEngine.addDialect(new LayoutDialect());        templateEngine.addDialect(new Java8TimeDialect());        templateEngine.setEnableSpringELCompiler(true);        return templateEngine;    }    @Override    public void configureViewResolvers(ViewResolverRegistry registry) {        ThymeleafViewResolver viewResolver = new ThymeleafViewResolver();        viewResolver.setTemplateEngine(templateEngine());        viewResolver.setCharacterEncoding("UTF-8");        viewResolver.setContentType("text/html; charset=UTF-8");        viewResolver.setCache(false);        registry.viewResolver(viewResolver);    }    @Override    public void addResourceHandlers(ResourceHandlerRegistry registry) {        registry.addResourceHandler("/resources/**")                .addResourceLocations("/WEB-INF/resources/")                .setCacheControl(CacheControl.maxAge(2, TimeUnit.HOURS).cachePublic())                .resourceChain(true);    }    @Bean    public RestTemplate restTemplate() {        RestTemplate restTemplate = new RestTemplate();        restTemplate.getMessageConverters().add(new StringHttpMessageConverter());        restTemplate.getMessageConverters().add(mappingJackson2HttpMessageConverter());        return restTemplate;    }    @Bean    public MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter() {        ObjectMapper mapper = new ObjectMapper();        mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter(mapper);        return converter;    }    @Bean(name = "multipartResolver")    public CommonsMultipartResolver multipartResolver() {        CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver();        multipartResolver.setMaxUploadSize(100000);        return multipartResolver;    }}